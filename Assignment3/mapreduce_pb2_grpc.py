# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mapreduce_pb2 as mapreduce__pb2


class MapperServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.performMap = channel.unary_unary(
                '/mapreduce.MapperService/performMap',
                request_serializer=mapreduce__pb2.InputLocation.SerializeToString,
                response_deserializer=mapreduce__pb2.MapResponse.FromString,
                )
        self.partition = channel.unary_unary(
                '/mapreduce.MapperService/partition',
                request_serializer=mapreduce__pb2.PartitionInput.SerializeToString,
                response_deserializer=mapreduce__pb2.PartitionResponse.FromString,
                )
        self.shuffle = channel.unary_unary(
                '/mapreduce.MapperService/shuffle',
                request_serializer=mapreduce__pb2.ShuffleInput.SerializeToString,
                response_deserializer=mapreduce__pb2.ShuffleResponse.FromString,
                )


class MapperServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def performMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def partition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shuffle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'performMap': grpc.unary_unary_rpc_method_handler(
                    servicer.performMap,
                    request_deserializer=mapreduce__pb2.InputLocation.FromString,
                    response_serializer=mapreduce__pb2.MapResponse.SerializeToString,
            ),
            'partition': grpc.unary_unary_rpc_method_handler(
                    servicer.partition,
                    request_deserializer=mapreduce__pb2.PartitionInput.FromString,
                    response_serializer=mapreduce__pb2.PartitionResponse.SerializeToString,
            ),
            'shuffle': grpc.unary_unary_rpc_method_handler(
                    servicer.shuffle,
                    request_deserializer=mapreduce__pb2.ShuffleInput.FromString,
                    response_serializer=mapreduce__pb2.ShuffleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mapreduce.MapperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def performMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MapperService/performMap',
            mapreduce__pb2.InputLocation.SerializeToString,
            mapreduce__pb2.MapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MapperService/partition',
            mapreduce__pb2.PartitionInput.SerializeToString,
            mapreduce__pb2.PartitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shuffle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.MapperService/shuffle',
            mapreduce__pb2.ShuffleInput.SerializeToString,
            mapreduce__pb2.ShuffleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ShuffleAndSort = channel.unary_unary(
                '/mapreduce.ReducerService/ShuffleAndSort',
                request_serializer=mapreduce__pb2.SAndSInput.SerializeToString,
                response_deserializer=mapreduce__pb2.SAndSResponse.FromString,
                )
        self.performReduce = channel.unary_unary(
                '/mapreduce.ReducerService/performReduce',
                request_serializer=mapreduce__pb2.ReduceInput.SerializeToString,
                response_deserializer=mapreduce__pb2.ReduceResponse.FromString,
                )


class ReducerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ShuffleAndSort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def performReduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ShuffleAndSort': grpc.unary_unary_rpc_method_handler(
                    servicer.ShuffleAndSort,
                    request_deserializer=mapreduce__pb2.SAndSInput.FromString,
                    response_serializer=mapreduce__pb2.SAndSResponse.SerializeToString,
            ),
            'performReduce': grpc.unary_unary_rpc_method_handler(
                    servicer.performReduce,
                    request_deserializer=mapreduce__pb2.ReduceInput.FromString,
                    response_serializer=mapreduce__pb2.ReduceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mapreduce.ReducerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReducerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ShuffleAndSort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.ReducerService/ShuffleAndSort',
            mapreduce__pb2.SAndSInput.SerializeToString,
            mapreduce__pb2.SAndSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def performReduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mapreduce.ReducerService/performReduce',
            mapreduce__pb2.ReduceInput.SerializeToString,
            mapreduce__pb2.ReduceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
